'use client'

import { useMemo } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { useAuth } from '@/contexts/AuthContext'
import { useEvents } from '@/hooks/useEvents'
import { useParticipants } from '@/hooks/useParticipants'
import { useSchools } from '@/hooks/useSchools'
import { 
  Calendar, 
  Users, 
  Building2, 
  Image, 
  TrendingUp,
  ArrowRight,
  Plus,
  Settings
} from 'lucide-react'
import Link from 'next/link'

interface DashboardStats {
  totalEvents: number
  totalParticipants: number
  totalSchools: number
  totalPhotos: number
  recentEvents: Array<{
    id: string
    name: string
    event_date: string | null
    participant_count: number
    school: {
      name: string
      type: string
    }
  }>
}

export default function DashboardPage() {
  const { user, tenant, loading: authLoading } = useAuth()
  const { events, loading: eventsLoading } = useEvents()
  const { participants, loading: participantsLoading } = useParticipants()
  const { schools, loading: schoolsLoading } = useSchools()

  // Memoizar estatísticas para evitar recálculos desnecessários
  const stats = useMemo((): DashboardStats => {
    if (!events || !participants || !schools) {
      return {
        totalEvents: 0,
        totalParticipants: 0,
        totalSchools: 0,
        totalPhotos: 0,
        recentEvents: []
      }
    }

    // Calcular estatísticas
    const totalEvents = events.length
    const totalParticipants = participants.length
    const totalSchools = schools.length
    
    // Fotos mockadas por enquanto (será implementado depois)
    const totalPhotos = participants.length * 3 // Estimativa

    // Criar mapas para lookup O(1) em vez de O(n)
    const schoolMap = new Map(schools.map(school => [school.id, school]))
    const eventMap = new Map(events.map(event => [event.id, event]))
    
    // Contar participantes por evento de forma eficiente
    const participantCountMap = new Map<string, number>()
    participants.forEach(participant => {
      const count = participantCountMap.get(participant.event_id) || 0
      participantCountMap.set(participant.event_id, count + 1)
    })

    // Eventos recentes com contagem de participantes
    const recentEvents = events
      .slice(0, 5)
      .map(event => {
        const participantCount = participantCountMap.get(event.id) || 0
        const school = schoolMap.get(event.school_id)
        return {
          id: event.id,
          name: event.name,
          event_date: event.event_date,
          participant_count: participantCount,
          school: {
            name: school?.name || 'Escola não encontrada',
            type: school?.type || 'tipo_desconhecido'
          }
        }
      })
      .sort((a, b) => {
        if (!a.event_date || !b.event_date) return 0
        return new Date(b.event_date).getTime() - new Date(a.event_date).getTime()
      })



    return {
      totalEvents,
      totalParticipants,
      totalSchools,
      totalPhotos,
      recentEvents
    }
  }, [events, participants, schools])

  // Mostrar loading apenas se auth ainda está carregando
  if (authLoading) {
    return (
      <div className="loading-container">
        <div className="loading-content">
          <h1 className="loading-text">Carregando...</h1>
        </div>
      </div>
    )
  }

  // Se não tem user ou tenant, mostrar erro
  if (!user || !tenant) {
    return (
      <div className="loading-container">
        <div className="loading-content">
          <h1 className="loading-text">Erro de autenticação</h1>
          <p className="loading-description">
            {!user ? 'Usuário não encontrado' : 'Tenant não encontrado'}
          </p>
        </div>
      </div>
    )
  }

  const loading = eventsLoading || participantsLoading || schoolsLoading

  // Função para obter o nome do tenant de forma segura
  const getTenantName = () => {
    if (tenant && tenant.name) {
      return tenant.name
    }
    return 'Usuário'
  }

  return (
    <div className="page-container">
      <div className="page-content">
        {/* Header */}
        <div className="page-header-section">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="page-header">
                Bem-vindo, {getTenantName()}!
              </h1>
              <p className="page-description">
                Gerencie seus eventos, participantes e fotos em um só lugar.
              </p>
            </div>
            <Link href="/dashboard/settings">
              <Button variant="outline">
                <Settings className="h-4 w-4 mr-2" />
                Configurações
              </Button>
            </Link>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid-stats">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-foreground">Total de Eventos</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-foreground">{loading ? '...' : stats.totalEvents}</div>
              <p className="text-xs text-muted-foreground">
                Eventos criados
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-foreground">Total de Participantes</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-foreground">{loading ? '...' : stats.totalParticipants}</div>
              <p className="text-xs text-muted-foreground">
                Participantes cadastrados
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-foreground">Total de Escolas</CardTitle>
              <Building2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-foreground">{loading ? '...' : stats.totalSchools}</div>
              <p className="text-xs text-muted-foreground">
                Escolas parceiras
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-foreground">Total de Fotos</CardTitle>
              <Image className="h-4 w-4 text-muted-foreground" role="img" aria-label="Ícone fotos" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-foreground">{loading ? '...' : stats.totalPhotos}</div>
              <p className="text-xs text-muted-foreground">
                Fotos capturadas
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <div className="grid-actions">
          <Card className="card-hover card-interactive">
            <Link href="/dashboard/events">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-foreground">
                  <Calendar className="h-5 w-5 text-primary" />
                  Gerenciar Eventos
                </CardTitle>
                <CardDescription className="text-muted-foreground">
                  Crie e gerencie seus eventos fotográficos
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full" variant="outline">
                  Ver Eventos
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardContent>
            </Link>
          </Card>

          <Card className="card-hover card-interactive">
            <Link href="/dashboard/schools">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-foreground">
                  <Building2 className="h-5 w-5 text-primary" />
                  Gerenciar Escolas
                </CardTitle>
                <CardDescription className="text-muted-foreground">
                  Cadastre e gerencie escolas
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full" variant="outline">
                  Ver Escolas
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardContent>
            </Link>
          </Card>

          <Card className="card-hover card-interactive">
            <Link href="/dashboard/participants">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-foreground">
                  <Users className="h-5 w-5 text-primary" />
                  Gerenciar Participantes
                </CardTitle>
                <CardDescription className="text-muted-foreground">
                  Cadastre e organize os participantes
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full" variant="outline">
                  Ver Participantes
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardContent>
            </Link>
          </Card>

          <Card className="card-hover card-interactive">
            <Link href="/dashboard/photos">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-foreground">
                  <Image className="h-5 w-5 text-primary" role="img" aria-label="Ícone fotos" />
                  Gerenciar Fotos
                </CardTitle>
                <CardDescription className="text-muted-foreground">
                  Upload e organização de fotos
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button className="w-full" variant="outline">
                  Ver Fotos
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardContent>
            </Link>
          </Card>
        </div>

        {/* Recent Events */}
        <div className="grid-content section-spacing-lg">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-foreground">
                <Calendar className="h-5 w-5 text-primary" />
                Eventos Recentes
              </CardTitle>
              <CardDescription className="text-muted-foreground">
                Últimos eventos criados
              </CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="content-spacing">
                  {[...Array(5)].map((_, i) => (
                    <div key={i} className="flex items-center justify-between">
                      <div className="content-spacing">
                        <div className="skeleton-title"></div>
                        <div className="skeleton-text"></div>
                      </div>
                      <div className="skeleton-text w-16"></div>
                    </div>
                  ))}
                </div>
              ) : stats.recentEvents.length > 0 ? (
                <div className="content-spacing-lg">
                  {stats.recentEvents.map((event) => (
                    <div key={event.id} className="flex items-center justify-between p-3 rounded-lg border border-border bg-muted/50">
                      <div className="flex-1">
                        <h4 className="font-medium text-foreground">{event.name}</h4>
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <span>{event.school.name}</span>
                          <Badge variant="secondary">{event.school.type}</Badge>
                        </div>
                        {event.event_date && (
                          <p className="text-xs text-muted-foreground mt-1">
                            {new Date(event.event_date).toLocaleDateString('pt-BR')}
                          </p>
                        )}
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-semibold text-primary">
                          {event.participant_count}
                        </div>
                        <p className="text-xs text-muted-foreground">participantes</p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="empty-state">
                  <Calendar className="empty-state-icon" />
                  <h3 className="empty-state-title">Nenhum evento ainda</h3>
                  <p className="empty-state-description">
                    Crie seu primeiro evento para começar a capturar fotos
                  </p>
                  <Link href="/dashboard/events">
                    <Button>
                      <Plus className="mr-2 h-4 w-4" />
                      Criar Evento
                    </Button>
                  </Link>
                </div>
              )}
            </CardContent>
          </Card>


        </div>

        {/* Revenue Overview */}
        <Card className="section-spacing-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-foreground">
              <TrendingUp className="h-5 w-5 text-primary" />
              Visão Geral de Receita
            </CardTitle>
            <CardDescription className="text-muted-foreground">
              Resumo financeiro dos eventos
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid-stats">
              <div className="text-center">
                <div className="text-3xl font-bold text-primary">
                  R$ {loading ? '0,00' : '0,00'}
                </div>
                <p className="text-sm text-muted-foreground">Receita Total</p>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-accent">
                  {loading ? '0' : '0'}
                </div>
                <p className="text-sm text-muted-foreground">Fotos Vendidas</p>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-chart-4">
                  R$ {loading ? '0,00' : '0,00'}
                </div>
                <p className="text-sm text-muted-foreground">Comissão</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
