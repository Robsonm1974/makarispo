import { createServerClient } from '@supabase/ssr'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  
  // DEBUG: Log da rota sendo acessada
  console.log('üîç MIDDLEWARE - Rota acessada:', req.nextUrl.pathname)
  
  // Permitir acesso irrestrito √† landing page
  if (req.nextUrl.pathname === '/') {
    console.log('‚úÖ MIDDLEWARE - Permitindo acesso √† landing page')
    return res
  }
  
  // Rotas p√∫blicas que n√£o precisam de autentica√ß√£o
  const publicRoutes = [
    '/auth/login',
    '/auth/callback',
    '/onboarding',
    '/lgpd',
    '/politica-de-privacidade',
    '/termos-de-servico'
  ]
  
  // Verificar se √© rota p√∫blica
  const isPublicRoute = publicRoutes.includes(req.nextUrl.pathname) || 
                       req.nextUrl.pathname.startsWith('/fotografo/')

  console.log('üîç MIDDLEWARE - √â rota p√∫blica?', isPublicRoute)

  // Se √© rota p√∫blica, permitir acesso
  if (isPublicRoute) {
    console.log('‚úÖ MIDDLEWARE - Permitindo acesso √† rota p√∫blica:', req.nextUrl.pathname)
    return res
  }

  console.log('üîç MIDDLEWARE - Verificando autentica√ß√£o...')

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return req.cookies.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          res.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: any) {
          res.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  const {
    data: { session },
  } = await supabase.auth.getSession()

  console.log('üîç MIDDLEWARE - Sess√£o encontrada?', !!session)

  // Se n√£o est√° autenticado, redirecionar para login
  if (!session) {
    console.log('‚ùå MIDDLEWARE - Sem sess√£o, redirecionando para login')
    return NextResponse.redirect(new URL('/auth/login', req.url))
  }

  console.log('‚úÖ MIDDLEWARE - Usu√°rio autenticado, verificando tenant...')

  // Se est√° autenticado, verificar se tem tenant
  const { data: tenant } = await supabase
    .from('tenants')
    .select('id')
    .eq('id', session.user.id)
    .single()

  console.log('üîç MIDDLEWARE - Tenant encontrado?', !!tenant)

  // Se n√£o tem tenant, redirecionar para onboarding
  if (!tenant && req.nextUrl.pathname !== '/onboarding') {
    console.log('‚ùå MIDDLEWARE - Sem tenant, redirecionando para onboarding')
    return NextResponse.redirect(new URL('/onboarding', req.url))
  }

  // Se tem tenant e est√° tentando acessar login/onboarding, redirecionar para dashboard
  if (tenant && (req.nextUrl.pathname === '/auth/login' || req.nextUrl.pathname === '/onboarding')) {
    console.log('‚úÖ MIDDLEWARE - Tenant existe, redirecionando para dashboard')
    return NextResponse.redirect(new URL('/dashboard', req.url))
  }

  console.log('‚úÖ MIDDLEWARE - Permitindo acesso √† rota protegida')
  return res
}

export const config = {
  // Comentar temporariamente para testar
  // matcher: [
  //   '/((?!api|_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  // ],
}
