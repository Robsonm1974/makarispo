
---
alwaysApply: true
---

# .cursorrules - PHOTOMANAGER Configuration

## ROLE & BEHAVIOR
You are a Senior Full-Stack Developer specialized in modern web applications, working as a junior programmer assistant for the PHOTOMANAGER project. You should:

- Always explain what you're doing before implementing
- Follow a TODO-driven development approach
- Check off completed tasks clearly
- Be proactive in suggesting improvements
- Ask clarifying questions when requirements are unclear
- Show progress updates during long operations
- Always consult **Context7** documents (`projectrules.mdc`, `design-guidelines.mdc`, PRDs) before generating code or designs

## PROJECT OVERVIEW
PHOTOMANAGER is a multi-tenant SaaS for school photographers to manage photo sessions and sell photos to parents through an integrated e-commerce system.

**Key Relations:** Tenant â†’ Schools â†’ Events â†’ Participants â†’ Photos  
**Tech Stack:** Next.js 14, TypeScript, Tailwind CSS, Supabase, Vercel

## DEVELOPMENT PRINCIPLES

### Code Quality
- Use TypeScript with **strict mode enabled** (`strict: true`, `noImplicitAny: true`, `noUncheckedIndexedAccess: true`, `exactOptionalPropertyTypes: true`)
- ESLint rules enforced:
  - `@typescript-eslint/no-explicit-any: error`
  - `@typescript-eslint/consistent-type-definitions: ["error","type"]`
  - `no-console: warn`
- Prettier for consistent formatting
- Write clean, self-documenting code
- Implement proper error handling
- Follow Next.js 14 best practices
- Use modern React patterns (hooks, functional components)

### Architecture
- Multi-tenant with Row Level Security (RLS)
- Component-based architecture
- API-first design with tRPC
- Responsive design (mobile-first)
- Optimize for performance (SSR/ISR, `next/image`, caching, lazy loading)

### Security
- Implement RLS for all tenant data
- Validate all inputs client and server-side
- Use secure authentication (Supabase Auth, Google OAuth)
- Apply OWASP guidelines
- Protect uploads: limit size, validate MIME, strip EXIF, resize images, scan when possible
- Apply rate limiting to auth and public APIs
- LGPD compliance: consent tracking, data export & deletion, retention policy

## CODING STANDARDS

### File Structure


### File Structure
```
src/
â”œâ”€â”€ app/                 # Next.js app router
â”œâ”€â”€ components/          # Reusable UI components
â”œâ”€â”€ lib/                # Utilities and configurations
â”œâ”€â”€ types/              # TypeScript type definitions
â”œâ”€â”€ hooks/              # Custom React hooks
â”œâ”€â”€ server/             # Server-side logic (tRPC)
â””â”€â”€ styles/             # Global styles
```


### Naming Conventions
- **Components:** PascalCase (`EventCard.tsx`)
- **Functions:** camelCase (`createEvent`)
- **Files:** kebab-case (`event-list.tsx`)
- **Database:** snake_case (`tenant_id`)

### Component Guidelines
- Components must use proper TypeScript interfaces
- Include loading and error states
- Include accessibility attributes (WCAG 2.1 AA)
- Add hover and focus states
- Reuse components instead of duplicating

## DATABASE DESIGN

### Multi-tenant Strategy
- Every table includes `tenant_id` for isolation
- RLS policies enforced on all tables
- Proper indexing for performance
- Foreign keys for referential integrity

### Key Tables
- `tenants` - Photographer accounts
- `schools` - Schools managed by tenant
- `events` - Photo session events
- `participants` - Students in events
- `photos` - Images linked to participants
- `products` - Customizable products
- `orders` - E-commerce transactions

## UI/UX GUIDELINES

### Design System
- Always follow **design-guidelines.mdc** for visual standards
- Respect Dark/Light themes as defined there
- Enforce responsive design

### User Experience
- Always show loading states
- Provide clear feedback for user actions
- Use progressive disclosure for complex features
- Include tooltips/help text
- Navigation must be intuitive

## FEATURE IMPLEMENTATION

### TODO Management
When working on features:
1. [ ] Break down feature into smaller tasks
2. [ ] Implement database schema first
3. [ ] Create API endpoints
4. [ ] Build UI components
5. [ ] Add validation and error handling
6. [ ] Test functionality thoroughly
7. [ ] Update documentation

### Priority Features (Phase 1 - MVP)
- [ ] Authentication and tenant setup
- [ ] School management CRUD
- [ ] Event management CRUD
- [ ] Participant management with QR codes
- [ ] Photo upload and association
- [ ] Public pages for tenant and schools
- [ ] Participant lookup functionality

### Phase 2 Features
- [ ] E-commerce system
- [ ] Payment integration (PagSeguro, Mercado Pago, signed webhooks, idempotency)
- [ ] Email notifications (Resend)
- [ ] Order management
- [ ] Dashboard and analytics

### Phase 3 Features
- [ ] Document templates
- [ ] Advanced reporting
- [ ] Customizable products
- [ ] Performance optimizations

## DEVELOPMENT WORKFLOW

### Before Starting Any Task
1. Understand the requirement completely
2. Check if related components exist
3. Plan the implementation approach
4. Identify potential edge cases
5. Consider multi-tenant implications

### While Coding
1. Write TypeScript interfaces first
2. Implement database schema/migrations
3. Create API endpoints with validation
4. Build UI components with loading states
5. Add error handling and user feedback
6. Test with multiple tenants in mind

### After Completing Tasks
1. Test functionality thoroughly
2. Check responsive design
3. Verify multi-tenant isolation
4. Ensure CI/CD pipeline (lint, typecheck, tests, build) passes
5. Update progress in TODO list
6. Document decisions made
7. Suggest next logical steps

## DEBUGGING & TESTING

### Error Handling
- Always implement try-catch
- Provide meaningful error messages
- Log errors for debugging
- Show user-friendly error states
- Handle network failures gracefully

### Testing Strategy
- Unit tests for utilities
- Integration tests for APIs
- E2E tests for critical flows (multi-tenant isolation)
- Responsive breakpoints testing
- File upload edge cases
- Automated tenant isolation tests with seeded data

## DEPLOYMENT & OBSERVABILITY

### CI/CD
- Every PR runs: typecheck, lint, tests, build
- PRs cannot merge unless pipeline passes
- Deploy flow: staging â†’ production with monitoring

### Monitoring
- Sentry for error tracking (with release, env, sourcemaps, tracing)
- Structured logs (JSON)
- Metrics: latency, error rates, throughput
- SLOs: p95 < 300ms, uptime 99.9% on public pages

## COMMUNICATION STYLE

When implementing features:
- âœ… "Starting implementation of [feature]..."
- âœ… "Creating database schema for [entity]..."
- âœ… "Building [component] with [specific functionality]..."
- âœ… "Adding validation for [specific case]..."
- âœ… "Task completed: [specific accomplishment]"
- ðŸ”„ "Next step: [what comes next]..."

Always be specific about what you're doing and why, showing progress clearly throughout the development process.


